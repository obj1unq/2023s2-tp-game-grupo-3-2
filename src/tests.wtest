import zombies.*
import elementos.*
import personajePrincipal.*
import randomizer.*
import wollok.game.*
import direcciones.*
	
describe "test del juego" {	
	
		const zombie = new ZombieNormal (position=game.at(1,2))
	    const enemigoFinal = new ZombieGrande(position=game.at(17,2))
	    const pocion = new Pocion(position=game.at(1,2))
	    const moneda = new Moneda(position=game.at(1,2),valorMoneda =1)
	    const proyectil = new Bala(position=game.at(1,2), imagenDisparo="fireball1.png",danio = 2 )
	    
        test "movimientos del mago" {
        	soldado.position(game.at(1,2))
            soldado.mover(derecha)
            assert.equals(game.at(2,2),soldado.position())
            soldado.mover(izquierda)
            assert.equals(game.at(1,2),soldado.position())
            soldado.mover(arriba)
            assert.equals(game.at(1,3),soldado.position())
            soldado.mover(abajo)
            assert.equals(game.at(1,2),soldado.position())
        }
        test "verificar si el mago sale del tablero" {
        	soldado.position(game.at(18,18))
        	soldado.mover(arriba)
        	assert.equals(game.at(18,18),soldado.position())
        	soldado.mover(derecha)
        	assert.equals(game.at(18,18),soldado.position())
        	
        	soldado.position(game.at(0,0))
        	soldado.mover(abajo)
        	assert.equals(game.at(0,0),soldado.position())
        	soldado.mover(izquierda)
        	assert.equals(game.at(0,0),soldado.position())
        }
        test "mago toma pocion de vida " {
        	soldado.vida(5)
        	assert.throwsException({pocion.contacto(soldado)})
        	assert.equals(10, soldado.vida() )
        }
        test "mago valida salud maxima" {
        	assert.throwsException({pocion.contacto(soldado)})
        	assert.equals(10, soldado.vida() )
        }
        test "mago agarra la moneda" {
        	assert.equals(0, soldado.monedas() )
        	assert.throwsException({moneda.contacto(soldado)})
        	assert.equals(1, soldado.monedas() )
        }
        test "mago agarra arma" {
        	arma.position(game.at(1,2))
        	assert.equals(libre, soldado.llevando() )
        	assert.throwsException({soldado.agarrar()})
        	assert.equals(llevada, soldado.llevando() )
        }
        test "mago valida agarrar arma" {
        	assert.throwsException({soldado.agarrar()})
        	assert.equals(libre, soldado.llevando() )
        }
        test "mago verifica si lleva el arma" {
        	arma.position(game.at(1,2))
        	assert.throwsException({soldado.agarrar()})
        	soldado.mover(derecha)
        	assert.equals(arma.position(), soldado.position() )
        }
        test "mago es perseguido por zombie " {
        	soldado.mover(izquierda)
        	zombie.mover(soldado)
        	assert.equals(game.at(0,2),zombie.position())
        	soldado.mover(arriba)
        	zombie.mover(soldado)
        	assert.equals(game.at(0,3),zombie.position())
        	soldado.mover(abajo)
        	zombie.mover(soldado)
        	assert.equals(game.at(0,2),zombie.position())
        	soldado.mover(derecha)
        	zombie.mover(soldado)
        	assert.equals(game.at(1,2),zombie.position())
        	
        }
        test "mago es perseguido por enemigo final" {
        	soldado.mover(arriba)
        	enemigoFinal.mover(soldado)
        	assert.equals(game.at(17,3),enemigoFinal.position())
        	soldado.mover(abajo)
        	enemigoFinal.mover(soldado)
        	assert.equals(game.at(17,2),enemigoFinal.position())
        } 
        test "mago pierde vida " {
        	soldado.perderVida(zombie)
        	assert.equals(9, soldado.vida() )
        } 
        test "mago es herido por zombie " {
        	zombie.atacarSoldado()
        	assert.equals(9, soldado.vida() )
        }
        test "mago es herido con un proyetil" {
        	assert.throwsException({soldado.impactoDeBala(proyectil)})
        	assert.equals(8, soldado.vida() )
        }
        test "enemigo normal es herido con proyectil" {
        	assert.throwsException({zombie.impactoDeBala(proyectil)})
        	assert.equals(8, zombie.vida() )
        }
        test "enemigo final es herido con proyectil" {
        	assert.throwsException({enemigoFinal.impactoDeBala(proyectil)})
        	assert.equals(18, enemigoFinal.vida() )
        }
        test "enemigo normal muere y deja una moneda" {
        	assert.throwsException({zombie.morir()})
        	assert.notThat(game.hasVisual(zombie))
        	assert.equals(monedero.monedas() , game.getObjectsIn(game.at(1,2)) )
        }
        
        
}
